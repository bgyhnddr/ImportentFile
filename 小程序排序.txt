// pages/main/main.js
Page({

  /**
   * 页面的初始数据
   */
  data: {
    move: '',
    dragIndex: -1,
    changing: false,
    list: [{
      id: 0
    }, {
      id: 1
    }, {
      id: 2
    }, {
      id: 3
    }, {
      id: 4
    }]
  },
  rectList: [],
  startPos: 0,
  dragging: false,
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {
    this.getData()
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function() {
    this.getTabBar().setData({
      selected: 0
    })
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function() {

  },
  changePos(index, insertIndex) {
    this.setData({
      changing: true
    })
    let item = this.data.list.splice(index, 1);
    this.data.list.splice(insertIndex, 0, ...item);
    this.data.list.forEach(o => {
      o.y = 0
    })
    this.setData({
      list: this.data.list
    }, () => {
      this.getData()
      setTimeout(() => {
        this.dragging = false
        this.setData({
          changing: false
        })
      }, 300)
    })

  },
  getData() {
    let query = this.createSelectorQuery().selectAll(".sort-item").fields({
      rect: true
    }, (res) => {
      this.rectList = res
    }).exec()
  },
  longTap(e) {
    if (!this.dragging && !this.data.changing) {
      console.log('longTap')
      this.dragging = true
      this.setData({
        dragIndex: e.currentTarget.dataset.index,
      })
      this.startPos = e.detail.y
    }
  },
  touchMove(e) {
    if (this.dragging) {
      let distance = e.changedTouches[0].pageY - this.startPos;
      let size = this.rectList[e.currentTarget.dataset.index].bottom - this.rectList[e.currentTarget.dataset.index].top;

      if (distance > 0) {
        this.data.list.forEach((o, index) => {
          if (this.startPos < this.rectList[index].top && this.rectList[index].top <= e.changedTouches[0].pageY) {
            o.y = -size
          } else if (index !== e.currentTarget.dataset.index) {
            o.y = 0
          } else if (index === e.currentTarget.dataset.index) {
            o.y = distance
          }
        })
      } else {
        this.data.list.forEach((o, index) => {
          if (this.startPos > this.rectList[index].bottom && this.rectList[index].bottom >= e.changedTouches[0].pageY) {
            o.y = size;
          } else if (index !== e.currentTarget.dataset.index) {
            o.y = 0;
          } else if (index === e.currentTarget.dataset.index) {
            o.y = distance
          }
        })
      }


      this.setData({
        list: this.data.list
      })
    }
  },
  touchEnd(e) {
    if (this.dragging) {
      this.dragging = false
      let changeIndex;
      if (e.changedTouches[0].pageY <= this.rectList[0].top) {
        changeIndex = 0
      } else if (e.changedTouches[0].pageY > this.rectList[this.rectList.length - 1].bottom) {
        changeIndex = this.rectList.length - 1;
      } else {
        changeIndex = this.rectList.map(o => o.top <= e.changedTouches[0].pageY && o.bottom > e.changedTouches[0].pageY).indexOf(true);
      }

      this.data.list[e.currentTarget.dataset.index].y = this.rectList[changeIndex].top - this.rectList[e.currentTarget.dataset.index].top


      this.setData({
        dragIndex: -1,
        list: this.data.list
      }, () => {
        setTimeout(() => {
          this.changePos(e.currentTarget.dataset.index, changeIndex)
        }, 300)
      })
    }
  },
  scan: function() {
    if (this.down) {
      let animation = wx.createAnimation()
      animation.translateY(0).step();
      this.setData({
        move: animation.export()
      })
    } else {
      let animation = wx.createAnimation()
      animation.translateY(200).step();
      this.setData({
        move: animation.export()
      })
    }

    this.down = !this.down
    console.warn('scan')
  }
})